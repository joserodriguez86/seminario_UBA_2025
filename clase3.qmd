---
title: "Clase 3 - Introducción al uso y aplicación de paquetes estadísticos para el tratamiento de fuentes de información en investigación social cuantitativa"
author: "José Rodríguez de la Fuente - Albano Vergara Parra"
institute: "Doctorado en Ciencias Sociales - Universidad de Buenos Aires"
format: 
  html:
    theme: journal
    toc: true
    toc-title: Contenido
    number-sections: true
    embed-resources: true
    smooth-scroll: true
    code-overflow: wrap
    code-copy: hover
    code-tools: false
lang: es
highlight-style: espresso
lightbox: true
cache: false
execute:
  warning: false
  message: false
---

# Importación de datos

## Librerías

Para esta clase, necesitaremos tener instaladas las siguientes librerías:

```{r eval=FALSE}
install.packages("tidyverse")
install.packages("haven")
```


## El formato *.csv* 

El formato **.csv** (Comma Separated Values) es uno de los formatos más utilizados para almacenar datos tabulares. En este formato, cada fila representa una observación y cada columna una variable. Los valores de las columnas están separados por comas (o punto y coma, dependiendo del idioma) y la primera fila suele contener los nombres de las variables. 

Usando *R base*, podemos leer los datos a través de la función `read.csv()`. En este caso probaremos abrir una base de datos del **RENAPER** que contiene los 20 apellidos mas frecuentes por provincia con cantidad y porcentaje sobre el total de la población viva que representan en diciembre de 2021.

```{r}
apellidos <- read.csv("bases/apellidos_mas_frecuentes_provincia.csv")
```

Otra forma de cargar los datos es a través de la librería `readr`^[[*Machete*](https://rstudio.github.io/cheatsheets/translations/spanish/data-import_es.pdf){target="_blank"} del paquete `readr`]. Esta librería es parte del *tidyverse* y es una alternativa más rápida y eficiente para leer datos. Para cargar los datos con `readr`, primero llamamos a la librería *tidyverse* y luego usamos la función `read_csv()`.

```{r}
library(tidyverse)

apellidos <- read_csv("bases/apellidos_mas_frecuentes_provincia.csv", progress = show_progress())

```

Fijense que lo que le estamos indicando a `R` es que abra el archivo que se encuentra en la dirección `bases/apellidos_mas_frecuentes_provincia.csv`, que se encuentra en la carpeta del proyecto, y que lo guarde en un objeto llamado **apellidos**.

Para comprobar que la operación se realizó con éxito debemos revisar el ambiente de trabajo (*environment*). En dicha ventana, se nos indica la cantidad de observaciones (`r  nrow(apellidos)` hogares) y variables (`r ncol(apellidos)`) que tiene el objeto en cuestión. Si hacemos *click* en el mismo, accederemos a la base de datos completa.  

::: {.callout-note title="Dato importante"}
Muchas veces nos encontramos con que las bases de datos que se encuentran separadas por comas o puntos y comas (;) no se encuentra en formato *.csv* sino en formato *.txt*, como es el caso de la Encuesta Permanente de Hogares del INDEC. En estos casos, podemos utilizar la misma función `read.csv()` o `read_csv()`, ya que ambas permiten especificar el separador de columnas a través del argumento `sep`. Por ejemplo, si el separador es punto y coma, podemos usar `read.csv("archivo.txt", sep = ";")` o `read_csv("archivo.txt", delim = ";")`.
:::

## El formato nativo: *.rds*

Otra forma de guardar y cargar datos es a través del formato nativo de `R`: **.rds**. Para guardar un objeto en este formato, usamos la función `saveRDS()` y para cargarlo, usamos `readRDS()`.

Ahora probaremos abrir una de las bases de datos de la encuesta del [**Latinobarómetro**](https://www.latinobarometro.org/latContents.jsp){target="_blank"} ya que desde su sitio web brindan sus datos en diversos formatos. Descarguemos el archivo del año 2023 en formato **.rds** y lo colocamos en la carpeta *bases*.  

Nuevamente, para abrir este archivo debemos asignarselo a un objeto, en este caso lo llamaremos *latinobarometro*.

```{r}
latinobarometro <- readRDS("bases/Latinobarometro_2023_Esp_Rds_v1_0.rds")
```

Si bien esto dependerá de la memoria RAM de cada computadora, abrir un archivo en formato **.rds** suele ser considerablemente más rápido que abrir un archivo en formato **.csv**, sobre todo cuando tienen una gran cantidad de casos y de variables.

Como podemos observar desde el ambiente de trabajo, la base de datos de personas tiene `r nrow(latinobarometro)` observaciones y `r ncol(latinobarometro)` variables.

## Abriendo otros formatos

Desde `R` también podemos abrir otros formatos comúnmente utilizados de forma sencilla. Por ejemplo, si queremos abrir un archivo en formato *.xlsx* o *.xls* podemos hacerlo a través del paquete `readxl`. Por otro lado, si queremos traer datos específicos en formato *.dta* (Stata) o *.sav* (SPSS), podemos hacerlo a través de los paquetes `haven` y `foreign`, respectivamente, sin ningún inconveniente.

Por ejemplo, descarguemos la base de Latinobarómetro nuevamente pero en formato *.sav*. La función que utilizaremos es `read_spss()` del paquete `haven` y asignaremos la base a un objeto llamado *latinobatrometro_spss*.

```{r}
library(haven)
latinobarometro_spss <- read_spss("bases/Latinobarometro_2023_Esp_Spss_v1_0.sav")
```

## Trayendo datos desde la web

Otra de las potencialidades que ofrecen estas funciones es que permiten leer datos directamente desde alguna URL de la web. Por ejemplo, hagamos una prueba utilizando alguno de los *datasets* disponibles en el [repositorio de datos abiertos de Argentina](https://datos.gob.ar/){target="_blank"}.

En este caso, seleccionaremos el registro de los 20 nombres más frecuentes registrados entre las personas nacidas vivas en Argentina entre los años 2012-2023 e identificadas por año de nacimiento. Para ello, utilizaremos la función `read_csv()` del paquete `readr` y le pasaremos como argumento la URL del archivo.

```{r}
nombres <- read_csv("https://datosabiertos.renaper.gob.ar/nombres_propios_frecuentes_anio_sexo_provincia_2012_2023.csv")
```

```{r echo=FALSE}
DT::datatable(nombres)
```

## Librerías de descarga de datos

Para algunas bases de datos, principalmente aquellas que se realizan con cierta frecuencia en el tiempo, existen paquetes específicos elaborados por usuarios o instituciones oficiales que permiten descargar los datos en forma, más o menos automática.

Algunos de estos paquetes solicitan acceso a una API (*Application Programming Interface*) para poder descargar los datos. Otros, simplemente, descargan los datos de la web. Si bien no es objeto de este seminario explorar estas alternativas, algunos ejemplos de paquetes de descarga de datos son:

-   [`ipumsr`](https://tech.popdata.org/ipumsr/){target="_blank"}: permite la manipulación y descarga de archivos del proyecto **IPUMS**, que contiene, entre otras fuentes, microdatos censales de distintos países.

-   [`eph`](https://cran.r-project.org/web/packages/eph/vignettes/eph.html){target="_blank"}: permite la descarga de datos de la Encuesta Permanente de Hogares (EPH) de Argentina. Al mismo tiempo facilita la construcción de paneles, pools de datos y estimaciones de pobreza.

-   [`PNADcIBGE`](https://cran.r-project.org/web/packages/PNADcIBGE/index.html){target="_blank"}: permite la descarga de datos de la Pesquisa Nacional por Amostra de Domicílios (PNAD) de Brasil.  

-   [`WDI`](https://cran.r-project.org/web/packages/WDI/index.html){target="_blank"}: permite la descarga de datos del Banco Mundial.  

-   [`Rilostat`](https://cran.r-project.org/web/packages/Rilostat/index.html){target="_blank"}: permite la descarga de datos de la Organización Internacional del Trabajo (OIT).  


### La librería `eph`  

La librería `eph`^[Carolina Pradier, Guido Weksler, Pablo Tiscornia, Natsumi Shokida, Germán Rosati, & Diego Kozlowski. (2023). ropensci/eph V1.0.0 (1.0.0). Zenodo. https://doi.org/10.5281/zenodo.8352221] es un paquete de `R` que permite descargar los datos de la Encuesta Permanente de Hogares (EPH) de Argentina. Esta encuesta es una fuente fundamental para el estudio del mercado laboral y las condiciones de vida en el país. El paquete `eph` facilita la descarga de los datos, la construcción de paneles y pools de datos, y la estimación de pobreza.  

Vamos a utilizarla para descargar algún trimestre de la EPH que utilizaremos como ejemplo. Para ello, primero debemos instalar el paquete y luego cargarlo.  

```{r eval=FALSE}
install.packages("eph")
```

```{r}
library(eph)
```

Ya instalado y activado el paquete, podemos consultar en la guía de usuario del mismo las distintas funciones que tiene. Utilizaremos la función `get_microdata()` para descargar los microdatos de la EPH. Por ejemplo, si queremos descargar los datos del cuarto cuatrimestre de 2024, debemos específicar los parámetros *year*, *period* y *type*. Ya que necesitamos "guardar" la base en algún lado, vamos a asignarsela a un objeto que se llamará eph_2024.  

```{r}
eph_2024 <- get_microdata(year = 2024, period = 4, type = "hogar")
```
Si todo salió bien, en el *ambiente de trabajo* vamos a visualizar un nuevo objeto llamado *eph_2024*.  


# Elementos de la base datos

## Clases de objetos

Una vez incorporada la base, el siguiente paso que solemos dar es observar cómo está dispuesta la matriz de datos. En el caso de `RStudio`, a diferencia de **SPSS**, las bases de datos se mantienen ocultas en el ambiente de trabajo. Para visualizarlas, podemos hacer *click* en el objeto específico, o si queremos un resumen, podemos escribir el nombre del objeto en la consola o en el *script*. 

```{r}
eph_2024
```


Como bien hemos visto, en el objeto *eph_2024*, se puede observar la estructura tripartita del dato. En las filas se disponen los hogares, en las columnas las variables y en las celdas los valores de las variables para cada hogar. Cada hogar tiene una identificación única conformada por la variable `CODUSU` (identificador de vivienda) y `NRO_HOGAR`. Esto refleja que la información se encuentra ordenada, o como se suele decir, en un formato *tidy*. Como veremos a continuación, paquetes estrella como `dplyr`, `ggplot2` y el resto de los del `tidyverse` están diseñados para trabajar con datos ordenados. 

Otra cuestión relevante es que las variables pueden ser de distintos tipos. Por ejemplo, algunas variables son numéricas, otras son categóricas y otras son de texto. Para saber qué tipo de variable es cada una, podemos usar la función `class()`. Por ejemplo, la variable `IX_TOT` es numérica, y cuenta la cantidad de personas que hay en el hogar. Mientras que la variable `CODUSU` es cadena, ya que almacena números y letras.

```{r}
class(eph_2024$IX_TOT)
class(eph_2024$CODUSU)
```

::: {.callout-tip title="Atención"}
En la línea de código escrita recién podemos ver que para señalar a una variable en una base de datos, en `R base`, se utiliza el símbolo *$*. Esto indica que estamos apuntando a una columna determinada del objeto especificado. El autocompletado es una gran ventaja cuando necesitamos identificar alguna columna.
:::

Al observar la clase del objeto `eph_2024`, podemos ver que es un *data.frame*, específicamente en formato *tibble*. Este es el tipo de objeto que se utiliza en `R` para almacenar bases de datos de estructura tabular.

```{r}
class(eph_2024)
```

## Los factores

En `R`, las variables categóricas son conocidas como *factores* y tienen la particularidad de tener un conjunto conocido de valores posibles y sobre los cuales puede establecerse un orden. Su diferenciación, respecto a otros tipos de objetos como los *character* o *numeric*, radica en que algunos análisis estadísticos más avanzados requieren que las variables categóricas sean tratadas como factores.  

Por ejemplo, en la base de hogares contamos con la variable `II7`, que indica el régimen de tenencia de la vivienda y del terreno en el que vive el hogar. Si bien la variable fue cargada como numérica, sabemos que, en realidad, es una variable categórica. Para convertirla en factor, usamos la función `factor()`, en donde, además, podemos declarar las distintas etiquetas (*labels*) que tienen las categorías. Para no sobreescribir la variable original, la guardamos en una nueva variable llamada `prop_factor`.

```{r}
eph_2024$tenencia <- factor(eph_2024$II7, 
                                    labels = c("No aplica",
                                               "Propietario de la vivienda y el terreno",
                                               "Propietario sólo de la vivienda",
                                               "Inquilino/arrendatario de la vivienda",
                                               "Ocupante por pago de impuestos/expensas",
                                               "Ocupante en relación de dependencia",
                                               "Ocupante gratuito (con permiso)",
                                               "Ocupante de hecho (sin permiso)",
                                               "Está en sucesión",
                                               "Otra situación"))

```

Con la función `levels()` podemos ver los niveles que tiene la variable `tenencia`, es decir, como están ordenadas las categorías.

```{r}
levels(eph_2024$tenencia)
```


::: {.callout-tip title="Atención"}
Las variables de tipo *factor* son una de las principales diferencias existentes entre `R` y otros programas estadísticos como **SPSS** o  **Stata**. En estos las variables categóricas suelen tener un valor numérico y una etiqueta asociada a cada valor, en forma de *metadata*. En `R` debemos utilizar paquetes específicos como [`labelled`](https://larmarange.github.io/labelled/){target="_blank"} para poder trabajar de forma similar.
:::


# Guardado de la base  

Como utilizaremos la base *eph_2024* en la siguiente clase, vamos a guardarla en formato **.rds**. Para ello, utilizamos la función `saveRDS()` y le pasamos como argumento el objeto que queremos guardar y el nombre del archivo. En este caso, lo guardaremos en la carpeta *bases*.  

```{r}
saveRDS(eph_2024, "bases/eph_2024.rds")
```

