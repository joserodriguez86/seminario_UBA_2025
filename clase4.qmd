---
title: "Clase 4 - Introducción al uso y aplicación de paquetes estadísticos para el tratamiento de fuentes de información en investigación social cuantitativa"
author: "José Rodríguez de la Fuente - Albano Vergara Parra"
institute: "Doctorado en Ciencias Sociales - Universidad de Buenos Aires"
format: 
  html:
    theme: journal
    toc: true
    toc-title: Contenido
    number-sections: true
    embed-resources: true
    smooth-scroll: true
    code-overflow: wrap
    code-copy: hover
    code-tools: false
lang: es
highlight-style: espresso
lightbox: true
cache: false
execute:
  warning: false
  message: false
---

# Antes de comenzar  

En esta clase utilizaremos las siguientes librerías:  

```{r}
library(tidyverse)
```

También vamos a necesitar la base de datos con lo que hemos trabajado en la clase anterior. La importaremos desde el archivo `eph_2024.rds` que se encuentra en la carpeta *bases* del repositorio. Para ello, utilizaremos la función `read_rds()`.  

```{r}
eph_2024 <- read_rds("bases/eph_2024.rds")
```



# Organizando datos y variables: selecciones, filtros y orden  

Luego de importar los datos con los que trabajaremos y de haberlos inspeccionado, lo siguiente consiste en organizarlos para posteriormente poder transformarlos, analizarlos e interpretarlos. En este apartado, veremos cómo seleccionar, filtrar y ordenar los datos, basándonos en el ecosistema de funciones que nos provee el paquete `dplyr`^[[*Machete*](https://rstudio.github.io/cheatsheets/translations/spanish/data-transformation_es.pdf){target="_blank"} del paquete `dplyr`] de `tidyverse`. Fundamentalmente, revisaremos las funciones `select()`, `filter()` y `arrange()`.  

Como lo indica su [página web](https://dplyr.tidyverse.org/){target="_blank"}, `dplyr` es una *gramática* de manipulación de datos basado en un conjunto de verbos que permiten realizar las tareas más comunes de manipulación de datos. Estos verbos son intuitivos y fáciles de recordar, lo que facilita su uso.  


## Selección de variables

A menudo trabajamos con bases de datos provenientes de registros o encuestas que contienen una gran cantidad de variables. En estos casos, es común que no todas las variables sean de interés para el análisis que queremos realizar. Otras veces, como en nuestro caso, disponemos de bases de datos, como en las encuestas de hogares, que cuentan con una mayor cantidad de filas que de columnas. Así mismo, seleccionar algunas de las variables con las que vamos a trabajar es una buena opción para reducir el tamaño de la base de datos y facilitar su manipulación y guardado.

Supongamos que quisieramos generar un nuevo objeto que contenga solo las variables `CODUSU`, `NRO_HOGAR`, `REGION` y la variable factor `tenencia`. Para ello, utilizamos la función `select()` y le pasamos como argumento el objeto de la base de datos y las variables que queremos seleccionar, generando un nuevo objeto que se llame **eph_2024_seleccion**. 

```{r}
eph_2024_seleccion <- select(eph_2024, CODUSU, NRO_HOGAR, REGION, tenencia)
```

Fijense en el ambiente de trabajo, que el nuevo objeto tiene las mismas observaciones que el objeto original, pero solo tiene las variables que seleccionamos. La función `select()` acepta también incluir rangos de variables, mediante el operador `:`. Por ejemplo, si quisiéramos seleccionar las variables `CODUSU` a `PONDERA`, podríamos hacerlo de la siguiente manera. Sobreescribimos el objeto **eph_2024_seleccion** para que contenga las variables seleccionadas.

```{r}
eph_2024_seleccion <- select(eph_2024, CODUSU:PONDERA)
```

Otra forma de seleccionar variables es a través del operador `-`, que nos permite excluir variables. Por ejemplo, si quisiéramos seleccionar todas las variables excepto `MAS_500`, podríamos hacerlo de la siguiente manera.

```{r}
eph_2024_seleccion <- select(eph_2024, -MAS_500)
```

La función, como todas las del paquete `dplyr`, es muy flexible y permite realizar selecciones de variables de forma muy sencilla. Recomendamos inspeccionar la misma mediante el comando `?select`.


## Filtrado de casos

Si con `select` seleccionamos variables, con `filter` seleccionamos casos. Es decir, filtramos las observaciones que cumplen con ciertas condiciones. Para esto es necesario conocer los operadores lógicos y relacionales que vimos en la clase anterior.

Por ejemplo, si sobre el objeto `eph_2024` quisiéramos seleccionar solo los hogares de la provincia de la región Noroeste (40), podríamos hacerlo de la siguiente manera.  

```{r}
eph_2024_seleccion <- filter(eph_2024, REGION == 40)

```

Vemos que en total, la región Noroeste, cuenta con `r nrow(eph_2024_seleccion)` hogares.  

Otro ejemplo que podemos aplicar sobre la base de hogares, es quedarnos con aquellos hogares que tienen más de un miembro, o, en otras palabras, que no son unipersonales. Para ello, utilizamos el operador `!=` que significa distinto.  

```{r}
eph_2024_seleccion <- filter(eph_2024, IX_TOT != 1)

```

También podríamos combinar ambos filtros, seleccionando hogares del Noroeste que no sean unipersonales, usando el operador lógico *&*.

```{r}
eph_2024_seleccion <- filter(eph_2024, REGION == 40 & IX_TOT != 1)
```

Las posibilidades son infinitas y dependiendo del filtro que querramos aplicar las expresiones lógico-relacionales pueden ser más o menos complejas.  

::: {.callout-warning title="Cuidado"}
No confundir el operador lógico **==** con el operador de asignación **=**. El primero se utiliza para comparar valores, mientras que el segundo se utiliza para asignar valores a una variable. En `SPSS` se utiliza el operador **=** para ambos casos. 
:::


## Ordenando los datos

Por último, la función `arrange()` nos permite ordenar los datos de acuerdo a una o más variables. Por ejemplo, si quisiéramos ordenar los hogares de la región Noroeste de acuerdo a la cantidad de personas que viven en ellos, podríamos hacerlo de la siguiente manera. Por defecto, la función ordena de forma ascendente, pero podemos cambiarlo a descendente utilizando la función `desc()`. 

```{r}
eph_2024_seleccion <- arrange(eph_2024_seleccion, IX_TOT)

eph_2024_seleccion <- arrange(eph_2024_seleccion, desc(IX_TOT))

```


## Facilitando el trabajo: el operador *pipe*

Ahora bien, aprovechando que estamos aprendiendo las principales funciones de `dplyr`, vamos a aprender un nuevo modo de trabajo que nos permite una dinámica más sencilla y eficiente. Para esto haremos uso del operador *pipe* (`%>%`), del paquete `magrittr` (tidyverse), que nos permite encadenar funciones de forma más legible y eficiente.  

![https://magrittr.tidyverse.org/logo.png](https://magrittr.tidyverse.org/logo.png)  


Por ejemplo, partiendo de la base de hogares original, vamos a seleccionar las variables *CODUSU, NRO_HOGAR, REGION* y *tenencia* y vamos a guardarlas en un nuevo objeto llamado *eph_2024_seleccion*. Pero además vamos a filtrar solo los hogares *inquilinos* y lo vamos a ordenar de formas ascendente por la variable *CODUSU*.
  
```{r}
eph_2024_seleccion <- eph_2024 %>% 
  select(CODUSU, NRO_HOGAR, REGION, tenencia) %>% 
  filter(tenencia == "Inquilino/arrendatario de la vivienda") %>% 
  arrange(CODUSU)
```

Fijense que el uso del operador *pipe* no solo nos permite trabajar de un modo más eficiente, sino que también nos simplifica el trabajo de no tener que estar *llamando* al objeto en cada función que aplicamos. La base de datos que estamos transformando, es indicada en la primera línea, y luego cada función se aplica automáticamente sobre la misma. 


::: {.callout-tip title="Atención"}
El operador `%>%` es una de las herramientas más poderosas de `R` e iremos incorporando su uso a lo largo del seminario. Es fácil de entender su lógica de funcionamiento. Permite que vayamos encadenando funciones, una por una, que apuntan a un único objeto que queda declarado en la primera línea. El atajo de teclado para invocarlo es a través de `Ctrl + Shift + M` en *Windows* y `Cmd + Shift + M` en *Mac*. 
:::

![Fuente: https://www.rforecology.com/post/how-to-use-pipes](https://www.rforecology.com/post/how-to-use-pipes/featured_hubecef9b286df4afcc3d745fb42639d5c_96728_720x0_resize_lanczos_2.png)

# Transformando los datos: creación y modificación variables

Teniendo ya la base en formato ordenado, habiendo seleccionado aquellas variables que vayamos a utilizar y filtrando los casos que nos interesan, el siguiente paso en el trabajo cuantitativo suele ser la creación de nuevas variables o la modificación de las existentes.  

Esta fase en el trabajo investigativo puede implicar, entre otras opciones: 

- Generar nuevas variables a partir de las existentes. Por ejemplo, realizar una sumatoria o resta aritmética a partir de los datos disponibles en dos o más variables.

- Recodificar una variable existente. Por ejemplo, reduciendo el número de categorías de una variable categórica o numérica (grupos etarios, niveles de ingreso, etc.).

- Generar una nueva variable a partir del cumplimiento de determinadas condiciones combinadas. Generalmente este trabajo se realiza para construir variables complejas. Por ejemplo, crear una variable que indique el tipo de hogar en cada caso.  


## Creación de variables mediante cálculos y expresiones condicionales

Para realizar estas operaciones utilizaremos siempre la función `mutate()` del paquete `dplyr`. Básicamente esta función nos creará una nueva columna en la matriz de datos, que contendrá los valores que le indiquemos. Por ejemplo, vamos a intentar calcular el nivel de hacinamiento de los hogares, a partir de la cantidad de personas que viven en ellos. El hacinamiento es una variable utilizada para el estudio de las condiciones de vida de los hogares y representa *el cociente entre la cantidad total de personas del hogar y la cantidad total de habitaciones o piezas de que dispone el mismo (sin contar baño/s y cocina/s)*. Se considera una situación de hacinamiento crítico cuando hay 3 o más personas por cuarto.  

Para construir dicha indicador, primero vamos a identificar aquellas variables que necesitamos, es decir, el **total de personas por hogar** `IX_TOT` y la **cantidad de habitaciones** `II1`. Entonces, en primer lugar, vamos a crear una nueva variable llamada `personas_hab` que represente el cociente entre ambas variables.


```{r}
eph_2024 <- eph_2024 %>% 
  mutate(personas_hab = IX_TOT / II1)

```

Ya contamos con la información necesaria para clasificar a los hogares según su situación de hacinamiento. Por último, en una nueva variable, llamada `hacinamiento`, vamos a asignar un valor de 1 a aquellos hogares que tengan más de 3 personas por habitación y un valor de 0 a aquellos que no cumplan con esta condición.  

Para ello, introduciremos una nueva función que nos permite plantear condiciones: `case_when()`. Esta función es muy similar al `IF` en `SPSS` o la función `ifelse()` de R base. `case_when()` se pasa dentro del mutate, y se le indica la condición que se quiere evaluar y el valor que se le asignará a la nueva variable en caso de que se cumpla dicha condición, separado por el símbolo `~`. Cada argemento se separa por una coma. 

```{r}
eph_2024 <- eph_2024 %>% 
  mutate(hacinamiento = case_when(personas_hab >= 3 ~ 1,
                                  personas_hab < 3 ~ 0))
```

El cálculo del hacinamiento podría simplificarse aun más, concatenando ambas operaciones dentro de la función `mutate()`.  

```{r eval=FALSE}
eph_2024 <- eph_2024 %>% 
  mutate(personas_hab = IX_TOT / II1,
         hacinamiento = case_when(personas_hab >= 3 ~ 1,
                                 personas_hab < 3 ~ 0))
```


Si queremos observar los resultados de la tarea realizada, podemos hacerlo a través de la función `table()`.

```{r}
table(eph_2024$hacinamiento)
```


## Recodificación de variables

El combo `mutate()` y `case_when()` también nos permite recodificar variables, es decir, cambiar los valores de una variable por otros o reducir su número de categorías. Es una práctica frecuente en el análisis de datos, ya que permite simplificar, posteriormente, la interpretación de los resultados.

Por ejemplo, vayamos ahora a la base de personas. En ella, nos encontramos con la variable `IPCF` que identifica al ingreso per cápita familiar. Vamos a recodificar esta variable en tres grupos de acuerdo a la distribución decílica^[[https://www.indec.gob.ar/uploads/informesdeprensa/ingresos_4trim24D779BFC8BE.pdf](https://www.indec.gob.ar/uploads/informesdeprensa/ingresos_4trim24D779BFC8BE.pdf){target="_blank"}].:  

- ingresos bajos: hasta $264.000 inclusive 
- ingresos medios: de $264.000 a $483.333 inclusive 
- ingresos altos: más de $483.333

```{r}
eph_2024 <- eph_2024 %>% 
  mutate(ingresos_familiares = case_when(IPCF >= 0 & IPCF <= 264000 ~ "ingresos bajos",
                             IPCF > 264000 & IPCF <= 483333 ~ "ingresos medios",
                             IPCF > 483333 ~ "ingresos altos"))
```

Otra forma de indicar que queremos agrupar valores que se encuentran en un rango es través del operador de pertenencia `%in%` que evalúa si los elementos de un vector están presentes en otro vector. Por ejemplo, podemos crear la misma variable de `ingresos_familiares` del siguiente modo:

```{r}
eph_2024 <- eph_2024 %>% 
  mutate(ingresos_familiares = case_when(IPCF %in% 0:264000 ~ "ingresos bajos",
                             IPCF %in% 264001:483333 ~ "ingresos medios",
                             IPCF > 483333 ~ "ingresos altos"))
```

::: {.callout-tip title="Atención"}
El operador `%in%` también puede ser utilizado para identificar valores en un vector alfanumérico o de cadena. En ese caso debemos ingresar los valores a evaluar dentro de la función c(). Por ejemplo, `provincia %in% c("Buenos Aires", "Chaco", "Formosa")`.
:::


